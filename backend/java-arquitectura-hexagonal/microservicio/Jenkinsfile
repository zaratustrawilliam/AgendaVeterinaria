pipeline {
  //Donde se va a ejecutar el Pipeline
  agent {
    label 'Slave4_Induccion'
  }

  //Opciones específicas de Pipeline dentro del Pipeline
  options {
    	buildDiscarder(logRotator(numToKeepStr: '3'))
 	disableConcurrentBuilds()
  }

  environment {
          PROJECT_PATH_BACK = './backend/java-arquitectura-hexagonal/microservicio/'
  }

  //Una sección que define las herramientas “preinstaladas” en Jenkins
  tools {
    jdk 'JDK8_Centos' //Verisión preinstalada en la Configuración del Master
    gradle 'Gradle6.9_Centos'
  }
/*	Versiones disponibles
      JDK8_Mac
      JDK6_Centos
      JDK7_Centos
      JDK8_Centos
      JDK10_Centos
      JDK11_Centos
      JDK13_Centos
      JDK14_Centos
*/

  //Aquí comienzan los “items” del Pipeline
  stages{
    stage('Checkout') {
      steps{
        echo "------------>Checkout<------------"
        checkout scm
      }
    }

    stage('Compile') {
      steps{
        echo "------------>Compile<------------"
        //sh 'chmod +x gradlew'
        //sh './gradlew --b ./build.gradle test'
        sh 'pwd'

        dir("${PROJECT_PATH_BACK}")
        {
        	sh 'gradle build -x test'
        }
      }
    }

    stage('Unit Test') {
          steps{
            echo "------------>Unit Tests<------------"
            //sh 'chmod +x gradlew'
            //sh './gradlew --b ./build.gradle test'
            sh 'pwd'

            dir("${PROJECT_PATH_BACK}")
            {
            	sh 'gradle build test'
            }
          }
        }

    stage('Static Code Analysis') {
      steps{
        echo '------------>Análisis de código estático<------------'
        withSonarQubeEnv('Sonar') {
        sh "${tool name: 'SonarScanner', type:'hudson.plugins.sonar.SonarRunnerInstallation'}/bin/sonar-scanner -Dproject.settings=./backend/java-arquitectura-hexagonal/microservicio/sonar-project.properties"
        }
      }
    }

  }

  post {
    always {
      echo 'This will always run'
      mail (to: 'william.vasquez@ceiba.com.co',subject: "Failed Pipeline:${currentBuild.fullDisplayName}",body: "Something is wrong with ${env.BUILD_URL}")
    }
    success {
      echo 'This will run only if successful'
      junit 'build/test-results/test/*.xml'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}
